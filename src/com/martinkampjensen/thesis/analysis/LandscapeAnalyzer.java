/**
 * Copyright 2010-2011 Martin Kamp Jensen
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.martinkampjensen.thesis.analysis;

import java.io.File;

import com.martinkampjensen.thesis.Constant;
import com.martinkampjensen.thesis.minimization.Minimizer;
import com.martinkampjensen.thesis.model.Model;
import com.martinkampjensen.thesis.util.Debug;
import com.martinkampjensen.thesis.util.R;
import com.martinkampjensen.thesis.util.Random;

public final class LandscapeAnalyzer
{
	private static final boolean PRINT_TO_STDOUT = false;

	public LandscapeAnalyzer()
	{
	}

	public void analyze(Model model, Minimizer minimizer, File file)
	{
		analyze(model, minimizer, file, 10, 20, 10000, 0.25d);
	}

	/**
	 * Randomly samples the fitness value of the fitness landscape of a model
	 * and writes box plots generated by R to a PDF file.
	 * <p>
	 * The method works as follows:
	 * <ol>
	 * <li>Generate a random angle configuration <code>C</code> of the input
	 *     model and minimize it.
	 * <li>For each delta angle value <code>d</code>, sample "a lot of times"
	 *     by setting each angle of <code>C</code> to a value uniformly random
	 *     in <code>[angle - d, angle + d[</code>. Subtract the energy value of
	 *     <code>C</code> from each sample.
	 * <li>Start over until the desired number of random angle
	 *     configurations is achieved.
	 * <li>Create box plots grouped by the delta angle values using the samples.
	 * </ol>
	 * Note that this can take a while and require a substantial amount of
	 * memory as the samples need to be saved while they are being generated and
	 * afterwards they need to be copied to R. The default maximum heap size of
	 * the JVM may need to be increased.
	 * <p>
	 * Example: 10 random angle configurations, 20 delta angle values, and
	 * 10,000 samples per delta angle value requires
	 * <code>2 * 10 * 20 * 10,000 *</code> {@link Double#SIZE}
	 * <code>&#47; 8</code> bytes of memory just for the samples. If the size of
	 * a {@link Double} is 64 bits, the required amount of memory is
	 * 32,000,000 bytes.
	 * 
	 * @param model the model to analyze.
	 * @param minimizer the minimizer to use.
	 * @param file the output file.
	 * @param nConfigs the number of randomly generated configurations to use.
	 * @param nDeltasPerConfig the number of different delta angles to use where
	 *        the first delta value will be <code>deltaAngle</code>, the second
	 *        will be <code>2 * deltaAngle</code>, etc.
	 * @param nSamplesPerDelta the number of samples to generate for each delta
	 *        value.
	 * @param deltaAngle the delta angle value in degrees.
	 */
	public void analyze(Model model, Minimizer minimizer, File file,
			int nConfigs, int nDeltasPerConfig, int nSamplesPerDelta,
			double deltaAngle)
	{
		Debug.line("Analyzing landscape");

		final Model copy = model.copy();
		final int size = copy.size();
		final double[] config = new double[size];
		final double[] lowerBounds = new double[size];
		final double[] upperBounds = new double[size];
		deltaAngle = Math.toRadians(deltaAngle);

		Debug.line("Allocating memory for %d samples",
				nConfigs * nDeltasPerConfig * nSamplesPerDelta);
		final double[][] values =
			new double[nDeltasPerConfig][nConfigs * nSamplesPerDelta];
		Debug.line("Allocated %f MB", ((double)Double.SIZE / 8 / 1024 / 1024)
				* nConfigs * nDeltasPerConfig * nSamplesPerDelta);

		// TODO: This could easily be parallelized if the evaluate() method of Model is thread-safe (it is not when OpenBabelEvaluator is used).
		for(int i = 0; i < nConfigs; i++) {
			double delta = 0d;
			final double initialValue = createConfig(config, copy, minimizer);

			for(int j = 0; j < nDeltasPerConfig; j++) {
				delta += deltaAngle;
				updateBounds(lowerBounds, upperBounds, config, delta);
				sample(values[j], i * nSamplesPerDelta, nSamplesPerDelta,
						lowerBounds, upperBounds, copy, initialValue);
			}

			Debug.line("%f%% of sampling completed",
					(double)(i+1) / nConfigs * 100);
		}

		Debug.line("Forcing garbage collection");
		System.gc();

		if(PRINT_TO_STDOUT) {
			for(int i = 1; i <= nDeltasPerConfig; i++) {
				System.out.print(i + "\t");
			}
			System.out.println();
			for(int i = 0; i < nConfigs; i++) {
				final int start = i * nSamplesPerDelta;
				final int end = start + nSamplesPerDelta;
				for(int j = start ; j < end; j++) {
					for(int k = 0; k < nDeltasPerConfig; k++) {
						System.out.print(values[k][j] + "\t");
					}
					System.out.println();
				}
			}
		}
		else {
			R.open();
			R.boxplot(values, file);
			R.close();
		}
	}

	private static double createConfig(double[] config, Model model,
			Minimizer minimizer)
	{
		final int size = model.size();

		for(int i = 0; i < size; i++) {
			model.setAngle(i, Random.nextDouble(0, Constant.TWO_PI));
		}

		final Model minimum = minimizer.minimize(model);

		for(int i = 0; i < size; i++) {
			config[i] = minimum.getAngle(i);
		}

		return minimum.evaluate();
	}

	private static void updateBounds(double[] lowerBounds, double[] upperBounds,
			double[] config, double delta)
	{
		final int size = config.length;

		for(int i = 0; i < size; i++) {
			final double angle = config[i];
			lowerBounds[i] = angle - delta;
			upperBounds[i] = angle + delta;
		}
	}

	private static void sample(double[] samples, int startIndex, int nSamples,
			double[] lowerBounds, double[] upperBounds, Model model,
			double initialValue)
	{
		final int endIndex = startIndex + nSamples;
		final int size = model.size();

		for(int i = startIndex; i < endIndex; i++) {
			for(int j = 0; j < size; j++) {
				final double lowerBound = lowerBounds[j];
				final double upperBound = upperBounds[j];
				final double angle = Random.nextDouble(lowerBound, upperBound);
				model.setAngle(j, angle);
			}

			samples[i] = model.evaluate() - initialValue;
		}
	}
}
